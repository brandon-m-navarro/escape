Coordinate
~~~~~~~~~~

	SquareCoordinate
	================
	1. (3, 4) -> (3, 6) | 2		- Simple horizontal check
	2. (3, 6) -> (3, 5) | 1
	
	3. (5, 5) -> (8, 5) | 3		- Simple vertical check
	4. (8, 5) -> (4, 5) | 4
	
	5. (4, 2) -> (8, 6) | 4		- Simple diagonal check (UP: L -> R)
	6. (7, 5) -> (4, 2) | 3
	
	7. (3, 7) -> (2, 6) | 1		- Simple diagonal check (DOWN: R -> L)
	8. (2, 6) -> (4, 8) | 2
	
	9. (4, 4) -> (8, 5) | 4		- Diagonals are allowed, so (UP: L -> R) once
							  	  then UP 3 more times	  
	10. (4, 4) -> (1, 5) | 3
	
	11. (4, 6) -> (6, 2) | 4   	- Slightly more complex case where we need to
							  	  traverse diagonally twice
	12. (6, 2) -> (4, 6) | 4
	
	13. (5, 6) -> (2, 2) | 4
	14. (5, 6) -> (1, 4) | 4
	
	OrthoSquareCoordinate
	====================
	15. (3, 4) -> (3, 6) | 2	- Simple horizontal check
	16. (3, 6) -> (3, 5) | 1
	
	17. (5, 5) -> (8, 5) | 3	- Simple vertical check
	18. (8, 5) -> (4, 5) | 4
	
	19. (4, 2) -> (8, 6) | 8	- Simple diagonal check (UP: L -> R)
	20. (7, 5) -> (6, 4) | 2
	
	21. (3, 7) -> (2, 6) | 2	- Simple diagonal check (DOWN: R -> L)
	22. (2, 6) -> (4, 8) | 4
	
	23. (4, 4) -> (8, 5) | 5	- Diagonals are allowed, so (UP: L -> R) once
							  	  then UP 3 more times	  
	24. (4, 4) -> (1, 5) | 4
	
	25. (4, 6) -> (6, 2) | 6   	- Slightly more complex case where we need to
							  	  traverse diagonally twice
	26. (6, 2) -> (4, 6) | 6
	
	HexCoordinate
	=============
	27. (0, 0) -> (-1, 1) | 1	- Up and to the left
	28. (-1, 1) -> (0, 0) | 1
	
	29. (0, 0) -> (-1, 0) | 1	- Down and to the left
	30. (-1, 0) -> (0, 0) | 1
	
	31. (0, 0) -> (0, -1) | 1	- Down
	32. (0, -1) -> (0, 0) | 1
	
	33. (0, 0) -> (1, -1) | 1	- Down and to the right
	34. (1, -1) -> (0, 0) | 1
	
	35. (0, 0) -> (1, 0) | 1	- Up and to the right
	36. (1, 0) -> (0, 0) | 1
	
	37. (0, 0) -> (0, 1) | 1	- Up
	38. (0, 1) -> (0, 0) | 1
	
	~~~~~~~~~~~ (-3, 0) -> (1, -1) | 4 ~~~~~~~~~~~~~~~~~~ NEEDS TO BE RE-VISITED
	
	
	
BoardBuilder
~~~~~~~~~~~~
XML Config
	Board 1 :: 
		BoardInitializer [xMax=8, yMax=8, coordinateId=SQUARE, 
						 locationInitializers=
						 	[LocationInitializer 
						 		[x=2, y=2, locationType=CLEAR, player=PLAYER1, pieceName=HORSE],
						 	LocationInitializer 
						 		[x=3, y=5, locationType=BLOCK, player=null, pieceName=null]]]
						 		
	Board 2 :: 
		BoardInitializer [xMax=8, yMax=8, coordinateId=ORTHOSQUARE, 
						 locationInitializers=
						 	[LocationInitializer 
						 		[x=2, y=2, locationType=CLEAR, player=PLAYER1, pieceName=HORSE],
						 	LocationInitializer 
						 		[x=3, y=5, locationType=BLOCK, player=null, pieceName=null]]]
						 		
	Board 3 :: 
		BoardInitializer [xMax=0, yMax=0, coordinateId=HEX, 
						 locationInitializers=
						 	[LocationInitializer 
						 		[x=2, y=2, locationType=CLEAR, player=PLAYER1, pieceName=HORSE],
						 	LocationInitializer 
						 		[x=3, y=5, locationType=BLOCK, player=null, pieceName=null]]]
	Board 4 :: 
		BoardInitializer [xMax=10, yMax=10, coordinateId=SQUARE, 
						 locationInitializers= [
						 	LocationInitializer 
						 		[x=2, y=2, locationType=CLEAR, player=PLAYER1, pieceName=HORSE],
						 	LocationInitializer 
						 		[x=3, y=5, locationType=BLOCK, player=null, pieceName=null],
						 		LocationInitializer 
						 		[x=4, y=5, locationType=EXIT, player=null, pieceName=null]]]

	SquareBoard
	===========
	39. Board1 	   :: bb.makeBoard().getClass() == SquareBoard.class
		- Affirm that a SquareBoard can be initialized through XML
		
	40. Board1 = b :: b.putPieceAt(ep.HORSE, SquareCoordinate.makeCoordinate(10, 10)) -> throws EscapeException
		- Can't place piece off the board
		
	42. Board1 = b :: b.putPieceAt(ep.HORSE, SquareCoordinate.makeCoordinate(4, 2)) > then >
					  b.getPieceAt(SquareCoordinate.makeCoordinate(4, 2)) -> ep.HORSE			
		- Place a piece and check that we can get that piece
		
	43. Board1 = b :: b.getPieceAt(SquareCoordinate.makeCoordinate(2, 2)) -> ep.HORSE	
		- Check we can get an initialized Piece
		
	44. Board1 = b :: b.getPieceAt(SquareCoordinate.makeCoordinate(1, 2)) -> null 
		- Check that getPieceAt() returns null for a spot with nothing on it
		
	45. Board1 = b :: b.getPieceAt(SquareCoordinate.makeCoordinate(3, 5)) -> null  
		- Check that getPieceAt still returns null if the space is initialized with any
	  	  LocationType, but no Piece
	  	  
	46. Board1 = b :: b.putPieceAt(ep.HORSE, SquareCoordinate.makeCoordinate(3, 5)) -> throws EscapeException
		- We shouldn't be allowed to put a piece on an initialized BLOCKED location
			
	47. Board1 = b :: b.putPieceAt(Player2.HORSE, SquareCoordinate.makeCoordinate(2, 2)) > then >
				  	  b.getPieceAt(SquareCoordinate.makeCoordinate(2, 2)) -> Player2.HORSE
		- Specified that we should replace the piece at the coordinates if one already exists
	
	48. Board1 = b :: b.putPieceAt(null, SquareCoordinate.makeCoordinate(2, 2)) > then >
				 	  b.getPieceAt(SquareCoordinate.makeCoordinate(2, 2)) -> null
		- Specified that if null is passed, then the piece should be removed
	
	49. Board4 = b :: b.putPieceAt(Player1.HORSE, SquareCoordinate.makeCoordinate(4, 5)) > then >
				  b.getPieceAt(SquareCoordinate.makeCoordinate(4, 5)) -> null
		- Specified that an exception SHOULD NOT be thrown, instead, a query of the board would
		  return null
	
		May want a getValidAdjacentSpots for each board -> ArrayList<Coordinates> getValidAdjacentSpots(Coordinate c)
		within each board class so we can access this.spots
	
	OrthoSquareBoard
	================
	will have the same tests as a square board, nothing unique
	
	The only difference is how distance is calculated
	
	The only required methods are putPiece and getPiece, so we just need
	to validate whether we can get a piece from that location, or put a piece at that location
	
	HexBoard
	========
	Need to have it set a default of xMax & yMax of 
	Can have a piece and place a piece on a negative coordinate
	